import com.codebox.speedrun.domain.data.common.enums.RunTimeEnum;
import com.codebox.speedrun.domain.data.common.enums.RunTypeEnum;

CREATE TABLE CategoryEntity(
    category_id              TEXT NOT NULL PRIMARY KEY,
    category_name            TEXT    NOT NULL,
    category_weblink         TEXT    NOT NULL,
    category_type            TEXT AS RunTypeEnum NOT NULL,
    category_rules           TEXT,
    category_miscellaneous   INTEGER AS Boolean NOT NULL,
    category_gameId          TEXT    NOT NULL
);

upsertCategory:
INSERT OR REPLACE INTO CategoryEntity(category_id, category_name, category_weblink, category_type, category_rules, category_miscellaneous, category_gameId)
VALUES (?, ?, ?, ?, ?, ?, ?);

CREATE TABLE CategoryPlayerEntity(
    categoryPlayer_categoryId  TEXT NOT NULL PRIMARY KEY,
    categoryPlayer_type        TEXT NOT NULL ,
    categoryPlayer_value       INTEGER NOT NULL
);

upsertCategoryPlayer:
INSERT OR REPLACE INTO CategoryPlayerEntity(categoryPlayer_categoryId, categoryPlayer_type, categoryPlayer_value)
VALUES (?, ?, ?);

observeCategoriesByGameId:
SELECT * FROM CategoryEntity
LEFT JOIN CategoryPlayerEntity ON CategoryPlayerEntity.categoryPlayer_categoryId = CategoryEntity.category_id
WHERE CategoryEntity.category_gameId = ?;

CREATE TABLE GameEntity(
    game_id                  TEXT NOT NULL PRIMARY KEY,
    game_boostReceived       INTEGER NOT NULL ,
    game_boostDistinctDonors INTEGER NOT NULL,
    game_abbreviation        TEXT NOT NULL,
    game_weblink             TEXT NOT NULL,
    game_discord             TEXT,
    game_released            INTEGER NOT NULL,
    game_releaseDate         TEXT NOT NULL,
    game_romhack             INTEGER AS Boolean DEFAULT 0 NOT NULL,
    game_created             TEXT
);

upsertGame:
INSERT OR REPLACE INTO GameEntity(game_id, game_boostReceived, game_boostDistinctDonors, game_abbreviation, game_weblink, game_discord, game_released, game_releaseDate, game_romhack, game_created)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

getGameById:
SELECT * FROM GameEntity
INNER JOIN GameRunTimeEntity ON GameRunTimeEntity.gameId = GameEntity.game_id
INNER JOIN RunTimeEntity ON RunTimeEntity.runTime = GameRunTimeEntity.runTime
INNER JOIN GameNamesEntity ON GameNamesEntity.gameName_gameId = GameEntity.game_id
INNER JOIN GameRuleSetEntity ON GameRuleSetEntity.gameRuleSet_gameId = GameEntity.game_id
INNER JOIN GameAssetsEntity ON GameAssetsEntity.gameAsset_gameId = GameEntity.game_id
LEFT JOIN GameDeveloperEntity ON GameDeveloperEntity.gameDeveloper_gameId = GameEntity.game_id
LEFT JOIN GamePublisherEntity ON GamePublisherEntity.gamePublisher_gameId = GameEntity.game_id
LEFT JOIN DeveloperEntity ON DeveloperEntity.developer_id = GameDeveloperEntity.gameDeveloper_developerId
LEFT JOIN PublisherEntity ON PublisherEntity.publisher_id = GamePublisherEntity.gamePublisher_publisherId
WHERE GameEntity.game_id = ?;

CREATE TABLE GameNamesEntity(
    gameName_gameId          TEXT NOT NULL PRIMARY KEY ,
    gameName_international   TEXT NOT NULL,
    gameName_japanese        TEXT,
    gameName_twitch          TEXT
);

upsertGameNames:
INSERT OR REPLACE INTO GameNamesEntity(gameName_gameId, gameName_international, gameName_japanese, gameName_twitch)
VALUES (?, ?, ?, ?);

CREATE TABLE GameRuleSetEntity(
    gameRuleSet_gameId              TEXT NOT NULL PRIMARY KEY ,
    gameRuleSet_showMilliseconds    INTEGER AS Boolean DEFAULT 0 NOT NULL,
    gameRuleSet_requireVerification INTEGER AS Boolean DEFAULT 0 NOT NULL,
    gameRuleSet_requireVideo        INTEGER AS Boolean DEFAULT 0 NOT NULL,
    gameRuleSet_defaultTime         TEXT AS RunTimeEnum NOT NULL,
    gameRuleSet_emulatorsAllowed    INTEGER AS Boolean DEFAULT 0 NOT NULL,
    FOREIGN KEY (gameRuleSet_defaultTime) REFERENCES RunTimeEntity (runTime)
);

CREATE INDEX defaultTimeIndex ON GameRuleSetEntity(gameRuleSet_defaultTime);

upsertGameRuleSet:
INSERT OR REPLACE INTO GameRuleSetEntity(gameRuleSet_gameId, gameRuleSet_showMilliseconds, gameRuleSet_requireVerification, gameRuleSet_requireVideo, gameRuleSet_defaultTime, gameRuleSet_emulatorsAllowed)
VALUES (?, ?, ?, ?, ?, ?);

CREATE TABLE GameAssetsEntity(
    gameAsset_gameId      TEXT NOT NULL PRIMARY KEY ,
    gameAsset_logo        TEXT,
    gameAsset_coverTiny   TEXT,
    gameAsset_coverSmall  TEXT,
    gameAsset_coverMedium TEXT,
    gameAsset_coverLarge  TEXT,
    gameAsset_icon        TEXT,
    gameAsset_trophy1st   TEXT,
    gameAsset_trophy2nd   TEXT,
    gameAsset_trophy3rd   TEXT,
    gameAsset_trophy4th   TEXT,
    gameAsset_background  TEXT,
    gameAsset_foreground  TEXT
);

upsertGameAssets:
INSERT OR REPLACE INTO GameAssetsEntity(gameAsset_gameId, gameAsset_logo, gameAsset_coverTiny, gameAsset_coverSmall, gameAsset_coverMedium, gameAsset_coverLarge, gameAsset_icon, gameAsset_trophy1st, gameAsset_trophy2nd, gameAsset_trophy3rd, gameAsset_trophy4th, gameAsset_background, gameAsset_foreground)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

CREATE TABLE RunTimeEntity(
    runTime TEXT AS RunTimeEnum NOT NULL PRIMARY KEY
);

upsertRunTime:
INSERT OR REPLACE INTO RunTimeEntity(runTime)
VALUES (?);

CREATE TABLE GameRunTimeEntity(
     gameId     TEXT NOT NULL,
     runTime    TEXT AS RunTimeEnum NOT NULL,
     PRIMARY KEY (gameId, runTime)
);

upsertGameRunTime:
INSERT OR REPLACE INTO GameRunTimeEntity(gameId, runTime)
VALUES (?, ?);

CREATE TABLE GameDeveloperEntity(
     gameDeveloper_gameId         TEXT NOT NULL,
     gameDeveloper_developerId    TEXT NOT NULL,
     PRIMARY KEY (gameDeveloper_gameId, gameDeveloper_developerId)
);

upsertGameDeveloper:
INSERT OR REPLACE INTO GameDeveloperEntity(gameDeveloper_gameId, gameDeveloper_developerId)
VALUES (?, ?);

CREATE TABLE GamePublisherEntity(
     gamePublisher_gameId         TEXT NOT NULL,
     gamePublisher_publisherId    TEXT NOT NULL,
     PRIMARY KEY (gamePublisher_gameId, gamePublisher_publisherId)
);

upsertGamePublisher:
INSERT OR REPLACE INTO GamePublisherEntity(gamePublisher_gameId, gamePublisher_publisherId)
VALUES (?, ?);

CREATE TABLE PlatformEntity(
     platform_id         TEXT NOT NULL PRIMARY KEY,
     platform_name       TEXT NOT NULL,
     platform_released   INTEGER NOT NULL
);

upsertPlatform:
INSERT OR REPLACE INTO PlatformEntity(platform_id, platform_name, platform_released)
VALUES (?, ?, ?);

CREATE TABLE DeveloperEntity(
     developer_id     TEXT NOT NULL PRIMARY KEY,
     developer_name   TEXT NOT NULL
);

upsertDeveloper:
INSERT OR REPLACE INTO DeveloperEntity(developer_id, developer_name)
VALUES (?, ?);

CREATE TABLE PublisherEntity(
     publisher_id     TEXT NOT NULL PRIMARY KEY,
     publisher_name   TEXT NOT NULL
);

upsertPublisher:
INSERT OR REPLACE INTO PublisherEntity(publisher_id, publisher_name)
VALUES (?, ?);

CREATE TABLE PlayerEntity(
     player_id     TEXT NOT NULL PRIMARY KEY,
     player_rel    TEXT NOT NULL
);

upsertPlayer:
INSERT OR REPLACE INTO PlayerEntity(player_id, player_rel)
VALUES (?, ?);

CREATE TABLE UserEntity(
     user_id           TEXT NOT NULL PRIMARY KEY,
     user_weblink        TEXT NOT NULL,
     user_role           TEXT NOT NULL,
     user_signup         TEXT,
     user_location       TEXT,
     user_twitch         TEXT,
     user_hitbox         TEXT,
     user_youtube        TEXT,
     user_twitter        TEXT,
     user_speedrunslive  TEXT,
     user_icon           TEXT,
     user_supporterIcon  TEXT,
     user_image          TEXT,
     FOREIGN KEY (user_id) REFERENCES PlayerEntity(player_id)
);

upsertUser:
INSERT OR REPLACE INTO UserEntity(user_id, user_weblink, user_role, user_signup, user_location, user_twitch, user_hitbox, user_youtube, user_twitter, user_speedrunslive, user_icon, user_supporterIcon, user_image)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

CREATE TABLE UserNamesEntity(
    userName_userId          TEXT NOT NULL PRIMARY KEY,
    userName_international   TEXT NOT NULL,
    userName_japanese        TEXT
);

upsertUserNames:
INSERT OR REPLACE INTO UserNamesEntity(userName_userId, userName_international, userName_japanese)
VALUES (?, ?, ?);

CREATE TABLE UserNamesStyleEntity(
    userNameStyle_userId          TEXT NOT NULL PRIMARY KEY,
    userNameStyle_style           TEXT NOT NULL,
    userNameStyle_colorLight      TEXT,
    userNameStyle_colorDark       TEXT,
    userNameStyle_colorFromLight  TEXT,
    userNameStyle_colorFromDark   TEXT,
    userNameStyle_colorToLight    TEXT,
    userNameStyle_colorToDark     TEXT
);

upsertUserNameStyles:
INSERT OR REPLACE INTO UserNamesStyleEntity(userNameStyle_userId, userNameStyle_style, userNameStyle_colorLight, userNameStyle_colorDark, userNameStyle_colorFromLight, userNameStyle_colorFromDark, userNameStyle_colorToLight, userNameStyle_colorToDark)
VALUES (?, ?, ?, ?, ?, ?, ?, ?);

CREATE TABLE GuestEntity(
    guest_id      TEXT NOT NULL PRIMARY KEY,
    guest_name    TEXT,
    FOREIGN KEY (guest_id) REFERENCES PlayerEntity(player_id)
);

upsertGuests:
INSERT OR REPLACE INTO GuestEntity(guest_id, guest_name)
VALUES (?, ?);

CREATE TABLE LocationEntity(
    id                      TEXT NOT NULL PRIMARY KEY,
    countryCode             TEXT NOT NULL,
    countryInternational    TEXT NOT NULL,
    countryJapanese         TEXT,
    regionCode              TEXT,
    regionInternational     TEXT,
    regionJapanese          TEXT
);

upsertLocation:
INSERT OR REPLACE INTO LocationEntity(id, countryCode, countryInternational, countryJapanese, regionCode, regionInternational, regionJapanese)
VALUES (?, ?, ?, ?, ?, ?, ?);

CREATE TABLE UserLocationEntity(
    userId      TEXT NOT NULL,
    locationId  TEXT NOT NULL,
    PRIMARY KEY (userId, locationId)
);

upsertUserLocation:
INSERT OR REPLACE INTO UserLocationEntity(userId, locationId)
VALUES (?, ?);

CREATE TABLE LeaderboardEntity(
    leaderboard_id          TEXT PRIMARY KEY,
    leaderboard_weblink     TEXT NOT NULL,
    leaderboard_gameId      TEXT NOT NULL,
    leaderboard_categoryId  TEXT NOT NULL,
    leaderboard_level       TEXT ,
    leaderboard_platform    TEXT ,
    leaderboard_region      TEXT ,
    leaderboard_emulators   INTEGER AS Boolean,
    leaderboard_videoOnly   INTEGER AS Boolean NOT NULL,
    leaderboard_timing      TEXT AS RunTimeEnum NOT NULL
);

upsertLeaderboard:
INSERT OR REPLACE INTO LeaderboardEntity(leaderboard_id, leaderboard_weblink, leaderboard_gameId, leaderboard_categoryId, leaderboard_level, leaderboard_platform, leaderboard_region, leaderboard_emulators, leaderboard_videoOnly, leaderboard_timing)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

CREATE TABLE LeaderboardRunEntity(
    leaderboardRun_leaderboardId    TEXT NOT NULL,
    leaderboardRun_runId            TEXT NOT NULL
);

upsertLeaderboardRun:
INSERT OR REPLACE INTO LeaderboardRunEntity(leaderboardRun_leaderboardId, leaderboardRun_runId)
VALUES (?, ?);

CREATE TABLE PlaceEntity(
    place_runId TEXT PRIMARY KEY,
    place_place INTEGER NOT NULL
);

upsertPlace:
INSERT OR REPLACE INTO PlaceEntity(place_runId, place_place)
VALUES (?, ?);

CREATE TABLE RunEntity(
    run_id          TEXT PRIMARY KEY,
    run_weblink     TEXT NOT NULL,
    run_gameId      TEXT NOT NULL,
    run_level       TEXT,
    run_categoryId  TEXT NOT NULL,
    run_comment     TEXT,
    run_date        TEXT,
    run_submitted   TEXT
);

upsertRun:
INSERT OR REPLACE INTO RunEntity(run_id, run_weblink, run_gameId, run_level, run_categoryId, run_comment, run_date, run_submitted)
VALUES (?, ?, ?, ?, ?, ?, ?, ?);

CREATE TABLE RunStatusEntity(
    runStatus_runId         TEXT PRIMARY KEY,
    runStatus_status        TEXT NOT NULL,
    runStatus_examiner      TEXT,
    runStatus_verifyDate    TEXT,
    FOREIGN KEY (runStatus_runId) REFERENCES RunEntity (run_id)
);

upsertRunStatus:
INSERT OR REPLACE INTO RunStatusEntity(runStatus_runId, runStatus_status, runStatus_examiner, runStatus_verifyDate)
VALUES (?, ?, ?, ?);

CREATE TABLE RunTimesEntity(
    runTimes_runId              TEXT PRIMARY KEY,
    runTimes_primary            TEXT  NOT NULL,
    runTimes_primaryT           REAL  NOT NULL,
    runTimes_realtime           TEXT,
    runTimes_realtimeT          REAL NOT NULL,
    runTimes_realtimeNoLoads    TEXT,
    runTimes_realtimeNoLoadsT   REAL NOT NULL,
    runTimes_ingame             TEXT,
    runTimes_ingameT            REAL NOT NULL,
    FOREIGN KEY (runTimes_runId) REFERENCES RunEntity (run_id)
);

upsertRunTimes:
INSERT OR REPLACE INTO RunTimesEntity(runTimes_runId, runTimes_primary, runTimes_primaryT, runTimes_realtime, runTimes_realtimeT, runTimes_realtimeNoLoads, runTimes_realtimeNoLoadsT, runTimes_ingame, runTimes_ingameT)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);

CREATE TABLE RunSystemEntity(
    runSystem_runId TEXT PRIMARY KEY,
    runSystem_platform TEXT,
    runSystem_emulated INTEGER AS Boolean NOT NULL,
    runSystem_region TEXT,
    FOREIGN KEY (runSystem_runId) REFERENCES RunEntity (run_id)
);

upsertRunSystem:
INSERT OR REPLACE INTO RunSystemEntity(runSystem_runId, runSystem_platform, runSystem_emulated, runSystem_region)
VALUES (?, ?, ?, ?);

CREATE TABLE RunPlayerJunctionEntity(
    runPlayer_runId     TEXT NOT NULL,
    runPlayer_playerId  TEXT NOT NULL,
    PRIMARY KEY (runPlayer_runId, runPlayer_playerId)
);

upsertRunPlayer:
INSERT OR REPLACE INTO RunPlayerJunctionEntity(runPlayer_runId, runPlayer_playerId)
VALUES (?, ?);

CREATE TABLE ValueEntity(
    value_id      TEXT PRIMARY KEY,
    value_label   TEXT NOT NULL
);

upsertValue:
INSERT OR REPLACE INTO ValueEntity(value_id, value_label)
VALUES (?, ?);

CREATE TABLE RunValueJunctionEntity(
    runValue_runId      TEXT NOT NULL,
    runValue_variableId TEXT NOT NULL,
    runValue_valueId    TEXT NOT NULL,
    PRIMARY KEY (runValue_runId, runValue_variableId, runValue_valueId)
);

upsertRunValue:
INSERT OR REPLACE INTO RunValueJunctionEntity(runValue_runId, runValue_variableId, runValue_valueId)
VALUES (?, ?, ?);

CREATE TABLE VariableEntity(
    variable_id             TEXT PRIMARY KEY,
    variable_name           TEXT NOT NULL,
    variable_categoryId     TEXT NOT NULL,
    variable_scope          TEXT NOT NULL,
    variable_mandatory      INTEGER AS Boolean NOT NULL,
    variable_userDefined    INTEGER AS Boolean NOT NULL,
    variable_obsoletes      INTEGER AS Boolean NOT NULL,
    variable_isSubcategory  INTEGER AS Boolean NOT NULL
);

upsertVariable:
INSERT OR REPLACE INTO VariableEntity(variable_id, variable_name, variable_categoryId, variable_scope, variable_mandatory, variable_userDefined, variable_obsoletes, variable_isSubcategory)
VALUES (?, ?, ?, ?, ?, ?, ?, ?);
